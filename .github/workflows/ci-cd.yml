name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # ---------------------------
  # 1. Continuous Integration
  # ---------------------------
  ci:
    name: Lint and Test
    runs-on: ubuntu-latest

    permissions:

      contents: write
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v8.1.0 # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          VALIDATE_CHECKOV: false
          VALIDATE_ENV: false
          VALIDATE_GITHUB_ACTIONS_ZIZMOR: false
          VALIDATE_JAVASCRIPT_PRETTIER: false
          VALIDATE_MARKDOWN: false
          VALIDATE_MARKDOWN_PRETTIER: false
          VALIDATE_NATURAL_LANGUAGE: false
          VALIDATE_PYTHON_PYLINT: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_PYTHON_RUFF: false
          VALIDATE_TRIVY: false
          VALIDATE_YAML_PRETTIER: false
          VALIDATE_HTML_PRETTIER: false
          VALIDATE_JSCPD: false

  # ---------------------------
  # 2. Continuous Deployment
  # ---------------------------
  cd:
    # âœ… Only run deployment on merge to main
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # -------- Docker Build & Push --------
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push API image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-api:latest ./server
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-api:latest

      - name: Build & push Client image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-client:latest ./client
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-client:latest

      # -------- Deploy to EC2 --------
      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy new app" \
          --region us-east-1 \ 
          --parameters 'commands=["cd ~/home/${{ secrets.EC2_USERNAME }}/app/Depi_Project && git pull && docker-compose up -d"]'

